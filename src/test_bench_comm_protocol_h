/*
 * Copyright (c) 2021-2024 LAAS-CNRS
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation, either version 2.1 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: LGLPV2.1
 */

/**
 * @brief  This file is a communication library for the power test bench of the twist board converter
 *
 * @author Luiz Villa <luiz.villa@laas.fr>
 */


#ifndef TEST_BENCH_COMM_PROTOCOL_H
#define TEST_BENCH_COMM_PROTOCOL_H

//-------------OWNTECH DRIVERS-------------------
#include "SpinAPI.h"
#include "TaskAPI.h"
#include "TwistAPI.h"
#include "DataAPI.h"

#define LEG1_CAPA_DGND PC6
#define LEG2_CAPA_DGND PB7
#define LEG1_DRIVER_SWITCH PC12
#define LEG2_DRIVER_SWITCH PB13

#define BOOL_SETTING_OFF 0
#define BOOL_SETTING_ON 1

#define BOOL_LEG 0
#define BOOL_CAPA 1
#define BOOL_DRIVER 2
#define BOOL_BUCK 3
#define BOOL_BOOST 4

#define CAPA_SWITCH_INDEX 0
#define DRIVER_SWITCH_INDEX 1


typedef enum
{
    IDLE, POWER_ON, POWER_OFF
} tester_states_t;

uint8_t mode = IDLE;

// Define a struct to hold the tracking variables and their names
typedef struct {
    const char *name;
    float32_t *address;
    channel_t channel_reference;
} TrackingVariables;

// Define a struct to hold the settings of each power leg
// settings ----
// bool leg_on    - to define if the leg is ON or OFF
// bool capa_on   - to define if the capacitor of the leg is ON or OFF
// bool driver_on - to define if the driver of the leg is ON or OFF
// bool buck_mode - to define is the leg is in buck mode
// bool boost_mode - to define is the leg is in boost mode
// switches ----
// pin_t CAPA_SWITCH    - holds the pin of the capa
// pint_t DRIVER_SWITCH - holds the pin of the driver
typedef struct {
    bool settings[5];
    pin_t switches[2];
    float32_t *tracking_variable;
    const char *tracking_var_name;
    float32_t reference_value;
    float32_t duty_cycle;
} PowerLegSettings;

typedef struct {
    char cmd[16];
    void (*func)(uint8_t power_leg, uint8_t setting_position);
} cmdToSettings_t;


typedef struct {
    char cmd[16];
    tester_states_t mode;
} cmdToState_t;




//----------------SERIAL PROTOCOL HANDLER FUNCTIONS---------------------
void console_read_line();

void defaultHandler();

void powerLegSettingsHandler();

void boolSettingsHandler(uint8_t power_leg, uint8_t setting_position);

void dutyHandler(uint8_t power_leg, uint8_t setting_position);

void referenceHandler(uint8_t power_leg, uint8_t setting_position);

void calibrationHandler();



#endif  //TEST_BENCH_COMM_PROTOCOL_H
